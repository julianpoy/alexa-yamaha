#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('alexa-yamaha:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var sslPath = "./ssl";
var enableSSL = true;

try {
    stats = fs.lstatSync(sslPath);
    var sslOptions = {
         key: fs.readFileSync(sslPath + '/private-key.pem'),
         cert: fs.readFileSync(sslPath + '/certificate.pem'),
         ciphers: [
        "ECDHE-RSA-AES128-GCM-SHA256",
        "ECDHE-ECDSA-AES128-GCM-SHA256",
        "ECDHE-RSA-AES256-GCM-SHA384",
        "ECDHE-ECDSA-AES256-GCM-SHA384",
        "DHE-RSA-AES128-GCM-SHA256",
        "ECDHE-RSA-AES128-SHA256",
        "DHE-RSA-AES128-SHA256",
        "AES128-GCM-SHA256",
        "!RC4", // RC4 be gone
        "HIGH",
        "!MD5",
        "!aNULL"
        ].join(':'),
        honorCipherOrder: true
    }
    console.log("-- SSL Enabled --");
} catch (e) {
    console.log("SSL Read Error: ", e);
    enableSSL = false;
    console.log("-- SSL Disabled --");
    console.log("If you are on a production server and this message is occuring, make sure you are running with elevated permissions.");
    console.log("If you have run with elevated permissions, the certificates are likely missing.");
    console.log("-- SSL Disabled --");
}




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3010');
app.set('port', port);

/**
 * Create HTTP server.
 */
 var server;
 if(enableSSL){
   server = https.createServer(sslOptions, app);
 } else {
   server = http.createServer(app);
 }
 
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
